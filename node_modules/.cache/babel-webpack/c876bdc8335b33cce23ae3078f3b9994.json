{"ast":null,"code":"import _asyncToGenerator from \"/Users/maxkema/Documents/media/test2102/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject } from 'rxjs';\nimport { playerStatsPremap } from './hepler';\nimport * as i0 from \"@angular/core\";\nexport class LittleCoreService {\n  constructor() {\n    this.endpoint = 'https://www.balldontlie.io/api/v1/';\n    this.players = new BehaviorSubject([]);\n    this.fillData();\n  } //\n  // API\n  //\n\n\n  fillData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.players.next(yield _this.getPlayers());\n    })();\n  }\n\n  getPlayers() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(`${_this2.endpoint}players?per_page=100`, {\n        method: 'GET'\n      });\n      const players = yield response.json();\n      return players.data.map(player => _this2.playerMapper(player));\n    })();\n  }\n\n  getStats(ids) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(`${_this3.endpoint}stats?postseason=true&per_page=100${_this3.clarifyPlayers(ids)}`, {\n        method: 'GET'\n      });\n      const playersStats = yield response.text();\n      playerStatsPremap(playersStats);\n      return playersStats.data.map(playerStats => _this3.playerStatsMapper(playerStats));\n    })();\n  } //\n  // methods\n  //\n\n\n  clarifyPlayers(ids) {\n    return ids.reduce((playersParams, id) => `${playersParams}&player_id=${id}`, '');\n  } //\n  // Mappers\n  //\n\n\n  playerMapper(playerBE) {\n    var _a, _b;\n\n    return {\n      id: playerBE.id,\n      isActive: false,\n      name: `${playerBE.first_name} ${playerBE.last_name}`,\n      teamTag: (_a = playerBE.team) === null || _a === void 0 ? void 0 : _a.abbreviation,\n      teamName: (_b = playerBE.team) === null || _b === void 0 ? void 0 : _b.name\n    };\n  }\n\n  playerStatsMapper(playerStatsBE) {\n    return {\n      id: playerStatsBE.player.id,\n      fg: playerStatsBE.ft_pct,\n      min: playerStatsBE.min,\n      pts: playerStatsBE.pts\n    };\n  }\n\n}\n\nLittleCoreService.ɵfac = function LittleCoreService_Factory(t) {\n  return new (t || LittleCoreService)();\n};\n\nLittleCoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LittleCoreService,\n  factory: LittleCoreService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/maxkema/Documents/media/test2102/src/app/services/little-core/little-core.service.ts"],"names":[],"mappings":";AACA,SAAS,eAAT,QAAgC,MAAhC;AACA,SAAS,iBAAT,QAAkC,UAAlC;;AAMA,OAAM,MAAO,iBAAP,CAAwB;AAI5B,EAAA,WAAA,GAAA;AAHA,SAAA,QAAA,GAAmB,oCAAnB;AACA,SAAA,OAAA,GAAU,IAAI,eAAJ,CAA8B,EAA9B,CAAV;AAGE,SAAK,QAAL;AACD,GAN2B,CAQ5B;AACA;AACA;;;AACM,EAAA,QAAQ,GAAA;AAAA;;AAAA;AACZ,MAAA,KAAI,CAAC,OAAL,CAAa,IAAb,OAAwB,KAAI,CAAC,UAAL,EAAxB;AADY;AAEb;;AAEK,EAAA,UAAU,GAAA;AAAA;;AAAA;AACd,YAAM,QAAQ,SAAS,KAAK,CAAC,GAAG,MAAI,CAAC,QAAQ,sBAAjB,EAAyC;AACnE,QAAA,MAAM,EAAE;AAD2D,OAAzC,CAA5B;AAGA,YAAM,OAAO,SAAS,QAAQ,CAAC,IAAT,EAAtB;AACA,aAAO,OAAO,CAAC,IAAR,CAAa,GAAb,CAAkB,MAAD,IAAsB,MAAI,CAAC,YAAL,CAAkB,MAAlB,CAAvC,CAAP;AALc;AAMf;;AAEK,EAAA,QAAQ,CAAC,GAAD,EAAc;AAAA;;AAAA;AAC1B,YAAM,QAAQ,SAAS,KAAK,CAC1B,GAAG,MAAI,CAAC,QAAQ,qCAAqC,MAAI,CAAC,cAAL,CACnD,GADmD,CAEpD,EAHyB,EAI1B;AACE,QAAA,MAAM,EAAE;AADV,OAJ0B,CAA5B;AAQA,YAAM,YAAY,SAAU,QAAQ,CAAC,IAAT,EAA5B;AACA,MAAA,iBAAiB,CAAC,YAAD,CAAjB;AACA,aAAO,YAAY,CAAC,IAAb,CAAkB,GAAlB,CAAuB,WAAD,IAC3B,MAAI,CAAC,iBAAL,CAAuB,WAAvB,CADK,CAAP;AAX0B;AAc3B,GArC2B,CAuC5B;AACA;AACA;;;AAEA,EAAA,cAAc,CAAC,GAAD,EAAc;AAC1B,WAAO,GAAG,CAAC,MAAJ,CACL,CAAC,aAAD,EAAwB,EAAxB,KAAuC,GAAG,aAAa,cAAc,EAAE,EADlE,EAEL,EAFK,CAAP;AAID,GAhD2B,CAkD5B;AACA;AACA;;;AAEA,EAAA,YAAY,CAAC,QAAD,EAAmB;;;AAC7B,WAAO;AACL,MAAA,EAAE,EAAE,QAAQ,CAAC,EADR;AAEL,MAAA,QAAQ,EAAE,KAFL;AAGL,MAAA,IAAI,EAAE,GAAG,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,SAAS,EAH7C;AAIL,MAAA,OAAO,EAAE,CAAA,EAAA,GAAA,QAAQ,CAAC,IAAT,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAa,EAAA,CAAE,YAJnB;AAKL,MAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,QAAQ,CAAC,IAAT,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAa,EAAA,CAAE;AALpB,KAAP;AAOD;;AAED,EAAA,iBAAiB,CAAC,aAAD,EAAuB;AACtC,WAAO;AACL,MAAA,EAAE,EAAE,aAAa,CAAC,MAAd,CAAqB,EADpB;AAEL,MAAA,EAAE,EAAE,aAAa,CAAC,MAFb;AAGL,MAAA,GAAG,EAAE,aAAa,CAAC,GAHd;AAIL,MAAA,GAAG,EAAE,aAAa,CAAC;AAJd,KAAP;AAMD;;AAvE2B;;;mBAAjB,iB;AAAiB,C;;;SAAjB,iB;AAAiB,EAAA,OAAA,EAAjB,iBAAiB,CAAA,I;AAAA,EAAA,UAAA,EAFhB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { playerStatsPremap } from './hepler';\nimport { PlayerBE, StatsBE, Player, Stats } from './types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LittleCoreService {\n  endpoint: string = 'https://www.balldontlie.io/api/v1/';\n  players = new BehaviorSubject<Player[]>([]);\n\n  constructor() {\n    this.fillData();\n  }\n\n  //\n  // API\n  //\n  async fillData() {\n    this.players.next(await this.getPlayers());\n  }\n\n  async getPlayers() {\n    const response = await fetch(`${this.endpoint}players?per_page=100`, {\n      method: 'GET',\n    });\n    const players = await response.json();\n    return players.data.map((player: PlayerBE) => this.playerMapper(player));\n  }\n\n  async getStats(ids: number[]) {\n    const response = await fetch(\n      `${this.endpoint}stats?postseason=true&per_page=100${this.clarifyPlayers(\n        ids\n      )}`,\n      {\n        method: 'GET',\n      }\n    );\n    const playersStats = (await response.text()) as any;\n    playerStatsPremap(playersStats);\n    return playersStats.data.map((playerStats: StatsBE) =>\n      this.playerStatsMapper(playerStats)\n    );\n  }\n\n  //\n  // methods\n  //\n\n  clarifyPlayers(ids: number[]) {\n    return ids.reduce(\n      (playersParams: string, id: number) => `${playersParams}&player_id=${id}`,\n      ''\n    );\n  }\n\n  //\n  // Mappers\n  //\n\n  playerMapper(playerBE: PlayerBE): Player {\n    return {\n      id: playerBE.id,\n      isActive: false,\n      name: `${playerBE.first_name} ${playerBE.last_name}`,\n      teamTag: playerBE.team?.abbreviation,\n      teamName: playerBE.team?.name,\n    };\n  }\n\n  playerStatsMapper(playerStatsBE: StatsBE): Stats {\n    return {\n      id: playerStatsBE.player.id,\n      fg: playerStatsBE.ft_pct,\n      min: playerStatsBE.min,\n      pts: playerStatsBE.pts,\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}